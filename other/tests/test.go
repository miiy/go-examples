package main

import (
	"fmt"
	"strings"
	"sync"
	"time"
)

func main() {
	var arr1 = []string{
		"a10-a11-a12-a13",
		"a11-a12-a13-a14",
		"a12-a13-a14-a15",
		"a13-a14-a15-a16",
		"a14-a15-a16-a17",
		"a15-a16-a17-a18",
		"a16-a17-a18-a19",
		"a17-a18-a19-a20",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",
		"s",

	}

	var arr2 = []string{
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
		"a11",
		"a20",
	}

	start := time.Now()
	count := 0
	for _, v := range arr1 {
		for _, v2 := range arr2 {
			count ++;
			if(strings.Contains(v, v2) == true) {
				fmt.Println(v)
			}
		}
	}
	elapsed := time.Since(start)
	fmt.Println(count)
	fmt.Println(elapsed)

	// fmt.Println(arr1)
	// fmt.Println(arr2)

	mu := sync.Mutex{}

}



func compute(mu *sync.Mutex)  {
	mu.Lock()

}